Flappy Pipes


It's Flappy Bird except with an AI bird, and we control the pipes and attempt to make the AI lose.


Prototype Code for working pipes moving right->left

***************************************************************************************
# Import the pygame module
import pygame

# Import pygame.locals for easier access to key coordinates
# Updated to conform to flake8 and black standards
import random
from pygame.locals import (
    K_UP,
    K_DOWN,
    K_LEFT,
    K_RIGHT,
    K_ESCAPE,
    KEYDOWN,
    QUIT,
)

clock = pygame.time.Clock()
x1 = 0
x2 = 0
speed = 250.
frame_no = 0

# Define constants for the screen width and height
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
pipeVelX = 4

# cloud image
image = pygame.image.load('cloud.png')
pygame.Surface.set_colorkey(image, [47, 148, 168])

# Define a player object by extending pygame.sprite.Sprite
# The surface drawn on the screen is now an attribute of 'player'
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super(Player, self).__init__()
        
        # Pipe border
        self.surfB = pygame.Surface((52, 502))
        self.surfB.fill((0, 0, 0))
        self.rectB = self.surfB.get_rect(
            center =(
                SCREEN_WIDTH,
                0)
            )
        
        # Pipe
        self.surf = pygame.Surface((50, 500))
        self.surf.fill((17, 168, 42))
        self.rect = self.surf.get_rect(
            center =(
                SCREEN_WIDTH,
                0)
            )
        
    def update(self, pressed_keys):
        if pressed_keys[K_UP]:
            self.rect.move_ip(0, -10)
        if pressed_keys[K_DOWN]:                
            self.rect.move_ip(0, 10)
        
        # left and right
        #if pressed_keys[K_LEFT]:
        #    self.rect.move_ip(-1, 0)
        #if pressed_keys[K_RIGHT]:
        #    self.rect.move_ip(1, 0)
            
            
        #if self.rect.left < 0:
        #    self.rect.left = 0
        #if self.rect.right > SCREEN_WIDTH:
        #    self.rect.right = SCREEN_WIDTH
        if self.rect.right <= 0:
            self.rect.left = SCREEN_WIDTH
        if self.rect.top <= -500:
            self.rect.top = -500
        if self.rect.bottom >= 500:
            self.rect.bottom = 500
        
        if self.rectB.center != self.rect.center:
            self.rectB.center = self.rect.center

class Player2(pygame.sprite.Sprite):
    def __init__(self):
        super(Player2, self).__init__()
        
        # Pipe border
        self.surftopB = pygame.Surface((52, 502))
        self.surftopB.fill((0, 0, 0))
        self.rectB = self.surftopB.get_rect(
            center =(
                SCREEN_WIDTH,
                SCREEN_HEIGHT)
            )
        
        # Pipe
        self.surftop = pygame.Surface((50, 500))
        self.surftop.fill((17, 168, 42))
        self.rect = self.surftop.get_rect(
            center =(
                SCREEN_WIDTH,
                SCREEN_HEIGHT)
            )
        
    def update(self, pressed_keys):
        if pressed_keys[K_UP]:
            self.rect.move_ip(0, -10)
        if pressed_keys[K_DOWN]:                
            self.rect.move_ip(0, 10)        

        # left and right
        #if pressed_keys[K_LEFT]:
        #    self.rect.move_ip(-10, 0)
        #if pressed_keys[K_RIGHT]:
        #    self.rect.move_ip(10, 0)
            
#limits to screen dimensions/keeps from crossing screen boundaries
        #if self.rect.left < 0:
        #    self.rect.left = 0
        if self.rect.right <= 0:
            self.rect.left = SCREEN_WIDTH
        if self.rect.top <= 100:
            self.rect.top = 100
        if self.rect.bottom >= 600 + 500:
            self.rect.bottom = 600 + 500
            
        if self.rectB.center != self.rect.center:
            self.rectB.center = self.rect.center




# Initialize pygame
pygame.init()

# Create the screen object
# The size is determined by the constant SCREEN_WIDTH and SCREEN_HEIGHT
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))


# Instantiate player. Right now, this is just a rectangle.
player = Player()
player2 = Player2()

# Variable to keep the main loop running
running = True
moving = True

    
# Main loop
while running:
    # for loop through the event queue
    
    for event in pygame.event.get():
        
        # Check for KEYDOWN event
        if event.type == KEYDOWN:
            # If the Esc key is pressed, then exit the main loop
            if event.key == K_ESCAPE:
                running = False
                moving = False
            
        # Check for QUIT event. If QUIT, then set running to false.
        elif event.type == QUIT:
            running = False
            moving = False
     


        
    

    # Get all the keys currently pressed
    pressed_keys = pygame.key.get_pressed()


    # Update the player sprite based on user keypresses
    player.update(pressed_keys)
    player2.update(pressed_keys)
    
    # Fill the screen with black
    screen.fill((126, 219, 242))
    
    # add clouds
    screen.blit(image, (50, 50))
    screen.blit(image, (375, 50))
    screen.blit(image, (150, 100))
    screen.blit(image, (475, 100))
    
    
    # add players + borders
    screen.blit(player2.surftopB, player2.rectB)
    screen.blit(player.surfB, player.rectB)
    screen.blit(player2.surftop, player2.rect)
    screen.blit(player.surf, player.rect)

    pygame.display.flip()
    
    player2.rect.move_ip(-4, 0)
    player.rect.move_ip(-4, 0)
    clock.tick(30)

pygame.quit()
***************************************************************************************
